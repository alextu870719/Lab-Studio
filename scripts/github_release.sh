#!/bin/bash

# GitHub Release Upload Script
# This script uploads built files to GitHub Releases

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Get version from pubspec.yaml
VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //g' | sed 's/+.*//g')
BUILD_NUMBER=$(grep "version:" pubspec.yaml | sed 's/.*+//g')

echo -e "${BLUE}GitHub Release Upload Script${NC}"
echo -e "${BLUE}Version: $VERSION+$BUILD_NUMBER${NC}"
echo ""

# Function to print step
print_step() {
    echo -e "${YELLOW}=== $1 ===${NC}"
}

# Function to print success
print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

# Function to print error
print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

# Check if GitHub CLI is installed
if ! command -v gh &> /dev/null; then
    print_error "GitHub CLI not installed"
    echo "Please install GitHub CLI:"
    echo "  macOS: brew install gh"
    echo "  Other: https://cli.github.com/"
    exit 1
fi

# Check if user is authenticated
if ! gh auth status &> /dev/null; then
    print_error "GitHub CLI not authenticated"
    echo "Please authenticate with GitHub:"
    echo "  gh auth login"
    exit 1
fi

# Check if release files exist
RELEASE_FILES=(releases/Lab-Studio-$VERSION*)
if [ ! -f "${RELEASE_FILES[0]}" ]; then
    print_error "No release files found for version $VERSION"
    echo "Please run the build script first:"
    echo "  ./scripts/build_and_release.sh"
    echo "  or: make all"
    exit 1
fi

print_step "Preparing GitHub Release"

RELEASE_TAG="v$VERSION"
RELEASE_TITLE="Lab Studio v$VERSION"
RELEASE_NOTES_FILE="releases/RELEASE_NOTES_v$VERSION.md"

# Create release notes if it doesn't exist
if [ ! -f "$RELEASE_NOTES_FILE" ]; then
    print_step "Creating release notes"
    cat > "$RELEASE_NOTES_FILE" << EOF
# Lab Studio v$VERSION

## üöÄ Êñ∞ÂäüËÉΩËàáÊîπÈÄ≤

### ÁâàÊú¨ $VERSION Êõ¥Êñ∞ÂÖßÂÆπ
- [Ë´ãÂú®ÈÄôË£°ÊèèËø∞ÈÄôÂÄãÁâàÊú¨ÁöÑÊñ∞ÂäüËÉΩÂíåÊîπÈÄ≤]
- [‰æãÂ¶ÇÔºö‰øÆÂæ©‰∫Ü PCR Ë®àÁÆóÁöÑÁ≤æÂ∫¶ÂïèÈ°å]
- [‰æãÂ¶ÇÔºöÊîπÂñÑ‰∫Ü‰ΩøÁî®ËÄÖ‰ªãÈù¢ÁöÑÈüøÊáâÊÄß]

## üì± ÊîØÊè¥Âπ≥Âè∞

Ê≠§ÁâàÊú¨ÊîØÊè¥‰ª•‰∏ãÂπ≥Âè∞Ôºö
- **Android** (API 21+)
- **iOS** (iOS 12.0+)
- **macOS** (macOS 10.14+)
- **Web** (Áèæ‰ª£ÁÄèË¶ΩÂô®)
- **Linux** (x64)
- **Windows** (x64)

## üì¶ ‰∏ãËºâÊ™îÊ°àË™™Êòé

| Ê™îÊ°àÈ°ûÂûã | Áî®ÈÄî | ÂÆâË£ùÊñπÂºè |
|---------|------|----------|
| **android.apk** | Android Ë£ùÁΩÆÁõ¥Êé•ÂÆâË£ù | ‰∏ãËºâÂæåÁõ¥Êé•ÂÆâË£ù |
| **android.aab** | Google Play Store ‰∏äÂÇ≥ | ÈñãÁôºËÄÖÁî®ÊñºÂïÜÂ∫ó‰∏äÂÇ≥ |
| **ios.ipa** | iOS Ë£ùÁΩÆÂÆâË£ù | ÈúÄË¶ÅÈñãÁôºËÄÖÂ∏≥ËôüÊàñ‰ºÅÊ•≠Á∞ΩÂêç |
| **macos.dmg** | macOS ÂÆâË£ùÂåÖ | ÈõôÊìäÈñãÂïü‰∏¶ÊãñÊãΩÂà∞ÊáâÁî®Á®ãÂºèË≥áÊñôÂ§æ |
| **web.zip** | Á∂≤È†ÅÁâàÊú¨ | Ëß£Â£ìÁ∏ÆÂæåÈÉ®ÁΩ≤Âà∞Á∂≤È†Å‰º∫ÊúçÂô® |
| **linux.tar.gz** | Linux ÁâàÊú¨ | Ëß£Â£ìÁ∏ÆÂæåÂü∑Ë°å |

## üõ†Ô∏è ÂÆâË£ùË™™Êòé

### Android
1. ‰∏ãËºâ \`Lab-Studio-$VERSION-android.apk\`
2. Âú®Ë£ùÁΩÆ‰∏äÂïüÁî®„ÄåÊú™Áü•‰æÜÊ∫ê„ÄçÂÆâË£ùÊ¨äÈôê
3. ÈªûÊìä APK Ê™îÊ°àÈÄ≤Ë°åÂÆâË£ù

### iOS
1. ‰∏ãËºâ \`Lab-Studio-$VERSION-ios.ipa\`
2. ‰ΩøÁî® Xcode ÊàñÁ¨¨‰∏âÊñπÂ∑•ÂÖ∑ÂÆâË£ùÂà∞Ë£ùÁΩÆ
3. Ê≥®ÊÑèÔºöÈúÄË¶ÅÊúâÊïàÁöÑÈñãÁôºËÄÖÊÜëË≠â

### macOS
1. ‰∏ãËºâ \`Lab-Studio-$VERSION-macos.dmg\`
2. ÈõôÊìäÈñãÂïü DMG Ê™îÊ°à
3. Â∞áÊáâÁî®Á®ãÂºèÊãñÊãΩÂà∞„ÄåÊáâÁî®Á®ãÂºè„ÄçË≥áÊñôÂ§æ

### Web
1. ‰∏ãËºâ \`Lab-Studio-$VERSION-web.zip\`
2. Ëß£Â£ìÁ∏ÆÂà∞Á∂≤È†Å‰º∫ÊúçÂô®ÁõÆÈåÑ
3. ÈÄèÈÅéÁÄèË¶ΩÂô®Â≠òÂèñ \`index.html\`

## üêõ Â∑≤Áü•ÂïèÈ°å

- [Â¶ÇÊúâÂ∑≤Áü•ÂïèÈ°åË´ãÂú®Ê≠§ÂàóÂá∫]

## üìã Á≥ªÁµ±ÈúÄÊ±Ç

- **Android**: Android 5.0 (API 21) ÊàñÊõ¥È´òÁâàÊú¨
- **iOS**: iOS 12.0 ÊàñÊõ¥È´òÁâàÊú¨
- **macOS**: macOS 10.14 ÊàñÊõ¥È´òÁâàÊú¨
- **Web**: Chrome 88+, Firefox 85+, Safari 14+, Edge 88+

## üîó Áõ∏ÈóúÈÄ£Áµê

- [Â∞àÊ°àÈ¶ñÈ†Å](https://github.com/alextu870719/Lab-Studio)
- [‰ΩøÁî®Ë™™Êòé](https://github.com/alextu870719/Lab-Studio/blob/main/README.md)
- [Âª∫ÁΩÆÊåáÂçó](https://github.com/alextu870719/Lab-Studio/blob/main/BUILD_GUIDE.md)
- [ÂïèÈ°åÂõûÂ†±](https://github.com/alextu870719/Lab-Studio/issues)

---
üìÖ ÁôºÂ∏ÉÊó•Êúü: $(date +"%Y-%m-%d")  
üîß Âª∫ÁΩÆÁ∑®Ëôü: $BUILD_NUMBER  
üì¶ Ëá™ÂãïÂª∫ÁΩÆËàáÁôºÂ∏É
EOF
    print_success "Created release notes: $RELEASE_NOTES_FILE"
    echo -e "${YELLOW}Ë´ãÁ∑®ËºØ $RELEASE_NOTES_FILE ‰æÜËá™Ë®ÇÁôºÂ∏ÉË™™Êòé${NC}"
fi

# Check if release already exists
if gh release view "$RELEASE_TAG" &> /dev/null; then
    print_step "Updating existing release $RELEASE_TAG"
    
    # Ask user if they want to update the existing release
    echo -e "${YELLOW}Release $RELEASE_TAG already exists.${NC}"
    read -p "Do you want to update it? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Êìç‰ΩúÂèñÊ∂à"
        exit 0
    fi
    
    # Upload all release files
    for file in releases/Lab-Studio-$VERSION*; do
        if [ -f "$file" ] && [[ "$file" != *.md ]]; then
            filename=$(basename "$file")
            echo "Uploading $filename..."
            if gh release upload "$RELEASE_TAG" "$file" --clobber; then
                print_success "Uploaded $filename"
            else
                print_error "Failed to upload $filename"
            fi
        fi
    done
    
else
    print_step "Creating new release $RELEASE_TAG"
    
    # Ask user about release type
    echo -e "${YELLOW}Release options:${NC}"
    echo "1. Draft release (ÂèØ‰ª•ÂÖàÈ†êË¶ΩÂÜçÁôºÂ∏É)"
    echo "2. Pre-release (Ê®ôË®òÁÇ∫È†êÁôºÂ∏ÉÁâàÊú¨)"
    echo "3. Public release (Á´ãÂç≥ÂÖ¨ÈñãÁôºÂ∏É)"
    read -p "ÈÅ∏ÊìáÁôºÂ∏ÉÈ°ûÂûã (1-3, È†êË®≠ÁÇ∫ 1): " choice
    
    RELEASE_OPTIONS=""
    case $choice in
        2)
            RELEASE_OPTIONS="--prerelease"
            ;;
        3)
            # Public release, no additional options needed
            ;;
        *)
            RELEASE_OPTIONS="--draft"
            ;;
    esac
    
    # Create new release with all files
    RELEASE_FILES_TO_UPLOAD=()
    for file in releases/Lab-Studio-$VERSION*; do
        if [ -f "$file" ] && [[ "$file" != *.md ]]; then
            RELEASE_FILES_TO_UPLOAD+=("$file")
        fi
    done
    
    if [ ${#RELEASE_FILES_TO_UPLOAD[@]} -eq 0 ]; then
        print_error "No release files found to upload"
        exit 1
    fi
    
    echo "Creating release with ${#RELEASE_FILES_TO_UPLOAD[@]} files..."
    
    if gh release create "$RELEASE_TAG" \
        --title "$RELEASE_TITLE" \
        --notes-file "$RELEASE_NOTES_FILE" \
        $RELEASE_OPTIONS \
        "${RELEASE_FILES_TO_UPLOAD[@]}"; then
        
        print_success "Release created successfully!"
    else
        print_error "Failed to create release"
        exit 1
    fi
fi

# Show release information
print_step "Release Information"
gh release view "$RELEASE_TAG"

echo ""
print_success "GitHub Release process completed!"
echo -e "${BLUE}Release URL: https://github.com/alextu870719/Lab-Studio/releases/tag/$RELEASE_TAG${NC}"
echo -e "${BLUE}All releases: https://github.com/alextu870719/Lab-Studio/releases${NC}"
