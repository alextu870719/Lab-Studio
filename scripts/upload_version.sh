#!/bin/bash

# Upload specific version to GitHub Releases
# Usage: ./upload_version.sh [version]

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Get version from parameter or default to 1.0.1
VERSION=${1:-"1.0.1"}
VERSION_DIR="releases/v$VERSION"

echo -e "${BLUE}Upload Version $VERSION to GitHub Releases${NC}"

# Function to print step
print_step() {
    echo -e "${YELLOW}=== $1 ===${NC}"
}

# Function to print success
print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

# Function to print error
print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

# Check if version directory exists
if [ ! -d "$VERSION_DIR" ]; then
    print_error "Version directory $VERSION_DIR not found"
    echo "Available versions:"
    ls -la releases/v* 2>/dev/null || echo "No version directories found"
    exit 1
fi

print_step "Checking version directory: $VERSION_DIR"
ls -la "$VERSION_DIR"

# Check if GitHub CLI is installed
if ! command -v gh &> /dev/null; then
    print_error "GitHub CLI not installed"
    echo "Please install GitHub CLI: brew install gh"
    exit 1
fi

# Check if user is authenticated
if ! gh auth status &> /dev/null; then
    print_error "GitHub CLI not authenticated"
    echo "Please authenticate with GitHub: gh auth login"
    exit 1
fi

print_step "Preparing GitHub Release for v$VERSION"

RELEASE_TAG="v$VERSION"
RELEASE_TITLE="Lab Studio v$VERSION"
RELEASE_NOTES_FILE="$VERSION_DIR/RELEASE_NOTES_v$VERSION.md"

# Create release notes if it doesn't exist
if [ ! -f "$RELEASE_NOTES_FILE" ]; then
    print_step "Creating release notes"
    cat > "$RELEASE_NOTES_FILE" << EOF
# Lab Studio v$VERSION

## üöÄ Êñ∞ÂäüËÉΩËàáÊîπÈÄ≤

### ÁâàÊú¨ $VERSION Êõ¥Êñ∞ÂÖßÂÆπ
- PCR Ë©¶ÂäëË®àÁÆóÂäüËÉΩÂÆåÂñÑ
- ‰ΩøÁî®ËÄÖ‰ªãÈù¢ÂÑ™Âåñ
- Â§öÂπ≥Âè∞ÊîØÊè¥ÊîπÈÄ≤
- ÊïàËÉΩÊèêÂçáÂíåÈåØË™§‰øÆÊ≠£

## üì± ÊîØÊè¥Âπ≥Âè∞

Ê≠§ÁâàÊú¨ÊîØÊè¥‰ª•‰∏ãÂπ≥Âè∞Ôºö
- **Android** (API 21+)
- **iOS** (iOS 12.0+) 
- **macOS** (macOS 10.14+)
- **Web** (Áèæ‰ª£ÁÄèË¶ΩÂô®)

## üì¶ ‰∏ãËºâÊ™îÊ°àË™™Êòé

| Ê™îÊ°àÈ°ûÂûã | Áî®ÈÄî | ÂÆâË£ùÊñπÂºè |
|---------|------|----------|
| **android.apk** | Android Ë£ùÁΩÆÁõ¥Êé•ÂÆâË£ù | ‰∏ãËºâÂæåÁõ¥Êé•ÂÆâË£ù |
| **macos.tar.gz** | macOS ÁâàÊú¨ | Ëß£Â£ìÁ∏ÆÂæåÂü∑Ë°å |
| **web.zip** | Á∂≤È†ÅÁâàÊú¨ | Ëß£Â£ìÁ∏ÆÂæåÈÉ®ÁΩ≤Âà∞Á∂≤È†Å‰º∫ÊúçÂô® |

## üõ†Ô∏è ÂÆâË£ùË™™Êòé

### Android
1. ‰∏ãËºâ \`Lab-Studio-v$VERSION-android.apk\`
2. Âú®Ë£ùÁΩÆ‰∏äÂïüÁî®„ÄåÊú™Áü•‰æÜÊ∫ê„ÄçÂÆâË£ùÊ¨äÈôê
3. ÈªûÊìä APK Ê™îÊ°àÈÄ≤Ë°åÂÆâË£ù

### macOS
1. ‰∏ãËºâ \`Lab-Studio-v$VERSION-macos.tar.gz\`
2. Ëß£Â£ìÁ∏ÆÊ™îÊ°à
3. Âü∑Ë°åÊáâÁî®Á®ãÂºè

### Web
1. ‰∏ãËºâ \`Lab-Studio-v$VERSION-web.zip\`
2. Ëß£Â£ìÁ∏ÆÂà∞Á∂≤È†Å‰º∫ÊúçÂô®ÁõÆÈåÑ
3. ÈÄèÈÅéÁÄèË¶ΩÂô®Â≠òÂèñ \`index.html\`

## üìã Á≥ªÁµ±ÈúÄÊ±Ç

- **Android**: Android 5.0 (API 21) ÊàñÊõ¥È´òÁâàÊú¨
- **macOS**: macOS 10.14 ÊàñÊõ¥È´òÁâàÊú¨
- **Web**: Chrome 88+, Firefox 85+, Safari 14+, Edge 88+

## üîó Áõ∏ÈóúÈÄ£Áµê

- [Â∞àÊ°àÈ¶ñÈ†Å](https://github.com/alextu870719/Lab-Studio)
- [‰ΩøÁî®Ë™™Êòé](https://github.com/alextu870719/Lab-Studio/blob/main/README.md)
- [ÂïèÈ°åÂõûÂ†±](https://github.com/alextu870719/Lab-Studio/issues)

---
üìÖ ÁôºÂ∏ÉÊó•Êúü: $(date +"%Y-%m-%d")  
üì¶ Lab Studio - Â∞àÊ•≠ÂØ¶È©óÂÆ§Ë®àÁÆóÂ∑•ÂÖ∑
EOF
    print_success "Created release notes: $RELEASE_NOTES_FILE"
fi

# Collect all release files (excluding system files and directories)
RELEASE_FILES=()
for file in "$VERSION_DIR"/*; do
    if [ -f "$file" ]; then
        filename=$(basename "$file")
        # Skip system files and README
        if [[ "$filename" != .DS_Store && "$filename" != *.md ]]; then
            RELEASE_FILES+=("$file")
        fi
    fi
done

if [ ${#RELEASE_FILES[@]} -eq 0 ]; then
    print_error "No release files found in $VERSION_DIR"
    exit 1
fi

echo "Found ${#RELEASE_FILES[@]} files to upload:"
for file in "${RELEASE_FILES[@]}"; do
    echo "  - $(basename "$file")"
done

# Check if release already exists
if gh release view "$RELEASE_TAG" &> /dev/null; then
    print_step "Updating existing release $RELEASE_TAG"
    
    echo -e "${YELLOW}Release $RELEASE_TAG already exists.${NC}"
    read -p "Do you want to update it? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Êìç‰ΩúÂèñÊ∂à"
        exit 0
    fi
    
    # Upload all release files
    for file in "${RELEASE_FILES[@]}"; do
        filename=$(basename "$file")
        echo "Uploading $filename..."
        if gh release upload "$RELEASE_TAG" "$file" --clobber; then
            print_success "Uploaded $filename"
        else
            print_error "Failed to upload $filename"
        fi
    done
    
else
    print_step "Creating new release $RELEASE_TAG"
    
    # Ask user about release type
    echo -e "${YELLOW}Release options:${NC}"
    echo "1. Draft release (ÂèØ‰ª•ÂÖàÈ†êË¶ΩÂÜçÁôºÂ∏É)"
    echo "2. Pre-release (Ê®ôË®òÁÇ∫È†êÁôºÂ∏ÉÁâàÊú¨)"
    echo "3. Public release (Á´ãÂç≥ÂÖ¨ÈñãÁôºÂ∏É)"
    read -p "ÈÅ∏ÊìáÁôºÂ∏ÉÈ°ûÂûã (1-3, È†êË®≠ÁÇ∫ 1): " choice
    
    RELEASE_OPTIONS=""
    case $choice in
        2)
            RELEASE_OPTIONS="--prerelease"
            ;;
        3)
            # Public release, no additional options needed
            ;;
        *)
            RELEASE_OPTIONS="--draft"
            ;;
    esac
    
    echo "Creating release with ${#RELEASE_FILES[@]} files..."
    
    if gh release create "$RELEASE_TAG" \
        --title "$RELEASE_TITLE" \
        --notes-file "$RELEASE_NOTES_FILE" \
        $RELEASE_OPTIONS \
        "${RELEASE_FILES[@]}"; then
        
        print_success "Release created successfully!"
    else
        print_error "Failed to create release"
        exit 1
    fi
fi

# Show release information
print_step "Release Information"
gh release view "$RELEASE_TAG"

echo ""
print_success "GitHub Release upload completed!"
echo -e "${BLUE}Release URL: https://github.com/alextu870719/Lab-Studio/releases/tag/$RELEASE_TAG${NC}"
echo -e "${BLUE}All releases: https://github.com/alextu870719/Lab-Studio/releases${NC}"
